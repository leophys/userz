// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const add = `-- name: Add :one
INSERT INTO users (
    first_name,
    last_name,
    nickname,
    password,
    email,
    country,
    created_at
)
VALUES ($1, $2, $3, $4, $5, $6, NOW())
RETURNING id, first_name, last_name, nickname, password, email, country, created_at, updated_at
`

type AddParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Nickname  string
	Password  string
	Email     string
	Country   sql.NullString
}

func (q *Queries) Add(ctx context.Context, arg AddParams) (User, error) {
	row := q.db.QueryRow(ctx, add,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.Password,
		arg.Email,
		arg.Country,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaginated = `-- name: ListPaginated :many
SELECT
    id, first_name, last_name, nickname, password, email, country, created_at, updated_at,
    count(*) OVER() AS total_elements
FROM users
WHERE $3
OFFSET $1
LIMIT $2
`

type ListPaginatedParams struct {
	Offset int32
	Limit  int32
}

type ListPaginatedRow struct {
	ID            uuid.UUID
	FirstName     sql.NullString
	LastName      sql.NullString
	Nickname      string
	Password      string
	Email         string
	Country       sql.NullString
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	TotalElements int64
}

func (q *Queries) ListPaginated(ctx context.Context, arg ListPaginatedParams) ([]ListPaginatedRow, error) {
	rows, err := q.db.Query(ctx, listPaginated, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPaginatedRow
	for rows.Next() {
		var i ListPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Nickname,
			&i.Password,
			&i.Email,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalElements,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const remove = `-- name: Remove :one
DELETE FROM users
WHERE
    id = $1
RETURNING id, first_name, last_name, nickname, password, email, country, created_at, updated_at
`

func (q *Queries) Remove(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, remove, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE users SET
    first_name = $2,
    last_name = $3,
    nickname = $4,
    password = $5,
    email = $6,
    country = $7,
    updated_at = NOW()
WHERE
    id = $1
RETURNING id, first_name, last_name, nickname, password, email, country, created_at, updated_at
`

type UpdateParams struct {
	ID        uuid.UUID
	FirstName sql.NullString
	LastName  sql.NullString
	Nickname  string
	Password  string
	Email     string
	Country   sql.NullString
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Nickname,
		arg.Password,
		arg.Email,
		arg.Country,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Nickname,
		&i.Password,
		&i.Email,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
